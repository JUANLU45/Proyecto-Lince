/**
 * üîç VALIDACI√ìN CENTRALIZADA - PROYECTO LINCE
 * 
 * L√≠mites, m√©tricas y criterios de validaci√≥n extra√≠dos de:
 * - PROJECT_REQUIREMENTS.md
 * - DEVELOPMENT_PLAN.md  
 * - ERROR_DETECTION.md
 * - TECHNOLOGY.md
 * - UI_COMPONENTS.md
 * - APP_BLUEPRINT.md
 * 
 * ‚ö†Ô∏è ADVERTENCIA: Estos valores son DOCUMENTADOS y NO ESPECULADOS
 * ‚ùå PROHIBIDO cambiar sin actualizar documentaci√≥n oficial
 */

// =============================================================================
// üìä REQUISITOS NO FUNCIONALES - PROJECT_REQUIREMENTS.md
// =============================================================================

/**
 * L√≠mites de usabilidad y interacci√≥n
 * Fuente: PROJECT_REQUIREMENTS.md - Secci√≥n 3.1
 */
export const LIMITES_USABILIDAD = {
  /** RNF-001: Interfaz simple con m√°ximo 3 toques para cualquier acci√≥n */
  maximoToquesAccion: 3,
  
  /** RNF-002: Tiempo de respuesta < 1 segundo para interacciones */
  tiempoRespuestaMaximo: 1000, // ms
} as const;

/**
 * L√≠mites de rendimiento del sistema
 * Fuente: PROJECT_REQUIREMENTS.md - Secci√≥n 3.2
 */
export const LIMITES_RENDIMIENTO = {
  /** RNF-005: Carga de aplicaci√≥n < 3 segundos */
  tiempoCargaMaximo: 3000, // ms
  
  /** RNF-007: Tama√±o de descarga < 150MB */
  tama√±oDescargaMaximo: 150 * 1024 * 1024, // bytes
  
  /** RNF-008: Funcionamiento fluido en dispositivos con 2GB RAM */
  ramMinimaRequerida: 2 * 1024 * 1024 * 1024, // bytes
} as const;

/**
 * Criterios de aceptaci√≥n de calidad
 * Fuente: PROJECT_REQUIREMENTS.md - Secci√≥n 5.1
 */
export const CRITERIOS_CALIDAD = {
  /** CA-001: 95% de actividades completables sin ayuda parental */
  porcentajeActividadesCompletables: 95, // %
  
  /** CA-002: Tiempo promedio de sesi√≥n entre 10-20 minutos */
  tiempoSesionMinimo: 10 * 60 * 1000, // ms
  tiempoSesionMaximo: 20 * 60 * 1000, // ms
  
  /** CA-003: Retenci√≥n de usuario > 70% despu√©s de 1 semana */
  retencionUsuarioMinima: 70, // %
  
  /** CA-004: Feedback positivo de padres > 4.5/5 */
  feedbackMinimoPositivo: 4.5, // puntuaci√≥n sobre 5
  
  /** CA-005: Cero crashes cr√≠ticos en producci√≥n */
  crashesCriticosMaximos: 0,
} as const;

/**
 * Criterios de validaci√≥n de IA
 * Fuente: PROJECT_REQUIREMENTS.md - Secci√≥n 5.2
 */
export const CRITERIOS_IA = {
  /** CA-IA-002: Tiempo de respuesta de IA < 2 segundos */
  tiempoRespuestaIA: 2000, // ms
  
  /** CA-IA-003: Personalizaci√≥n efectiva despu√©s de 5 sesiones */
  sesionesPersonalizacionMinimas: 5,
} as const;

// =============================================================================
// üéØ L√çMITES DE COMPLEJIDAD - ERROR_DETECTION.md
// =============================================================================

/**
 * L√≠mites estrictos de complejidad de c√≥digo
 * Fuente: ERROR_DETECTION.md - Secci√≥n "L√çMITES ESTRICTOS CONFIGURADOS"
 */
export const LIMITES_COMPLEJIDAD = {
  /** Complejidad ciclom√°tica m√°xima: 15 por funci√≥n */
  complejidadCiclomaticaMaxima: 15,
  
  /** Profundidad m√°xima de anidaci√≥n: 4 niveles */
  profundidadAnidacionMaxima: 4,
  
  /** Callbacks anidados m√°ximo: 3 niveles */
  callbacksAnidadosMaximo: 3,
  
  /** Par√°metros por funci√≥n m√°ximo: 5 */
  parametrosPorFuncionMaximo: 5,
  
  /** L√≠neas por archivo m√°ximo: 300 (sin contar espacios y comentarios) */
  lineasPorArchivoMaximo: 300,
  
  /** L√≠neas por funci√≥n m√°ximo: 50 (sin contar espacios y comentarios) */
  lineasPorFuncionMaximo: 50,
} as const;

/**
 * M√©tricas de calidad de c√≥digo
 * Fuente: ERROR_DETECTION.md - Secci√≥n "M√âTRICAS DE CALIDAD"
 */
export const METRICAS_CALIDAD_CODIGO = {
  /** Complejidad Ciclom√°tica */
  complejidad: {
    simple: { min: 1, max: 5 },      // C√≥digo simple ‚úÖ
    moderado: { min: 6, max: 10 },   // C√≥digo moderado ‚ö†Ô∏è
    complejo: { min: 11, max: 15 },  // C√≥digo complejo ‚ö†Ô∏è‚ö†Ô∏è
    rechazado: { min: 16 },          // RECHAZADO ‚ùå
  },
  
  /** Cobertura de Tests */
  coberturaTesting: {
    excelente: { min: 90, max: 100 }, // Excelente ‚úÖ
    bueno: { min: 80, max: 89 },      // Bueno ‚ö†Ô∏è
    aceptable: { min: 70, max: 79 },  // Aceptable ‚ö†Ô∏è‚ö†Ô∏è
    inaceptable: { max: 69 },         // INACEPTABLE ‚ùå
  },
  
  /** Performance */
  performance: {
    timeToInteractive: 3000, // ms
    bundleSize: 10 * 1024 * 1024, // 10MB en bytes
    memoryUsage: 100 * 1024 * 1024, // 100MB en bytes
  },
} as const;

// =============================================================================
// üöÄ L√çMITES DE PERFORMANCE - DEVELOPMENT_PLAN.md
// =============================================================================

/**
 * Criterios de performance del sistema
 * Fuente: DEVELOPMENT_PLAN.md - Secci√≥n "4.3 Criterios de Calidad"
 */
export const CRITERIOS_PERFORMANCE = {
  /** Performance: 60 FPS constantes, < 3s tiempo de carga */
  fpsMinimos: 60,
  tiempoCargaMaximoSistema: 3000, // ms
  
  /** Usabilidad: 95% de tareas completables sin ayuda */
  tareasCompletablesSinAyuda: 95, // %
  
  /** Estabilidad: < 0.1% crash rate en producci√≥n */
  crashRateMaximo: 0.1, // %
} as const;

/**
 * Distribuci√≥n de tests requerida
 * Fuente: DEVELOPMENT_PLAN.md - Testing
 */
export const DISTRIBUCION_TESTS = {
  /** E2E Tests (10%) - Flujos cr√≠ticos completos */
  e2eTests: 10, // %
  
  /** Integration Tests (20%) - Interacci√≥n entre componentes */
  integrationTests: 20, // %
  
  /** Unit Tests (70%) - L√≥gica individual de componentes */
  unitTests: 70, // %
} as const;

// =============================================================================
// üì± L√çMITES UI/UX - UI_COMPONENTS.md & APP_BLUEPRINT.md
// =============================================================================

/**
 * Dimensiones m√≠nimas de elementos interactivos
 * Fuente: UI_COMPONENTS.md
 */
export const DIMENSIONES_MINIMAS = {
  /** Altura m√≠nima: 60px (t√°ctil f√°cil para ni√±os) */
  alturaBotonMinima: 60, // px
  
  /** Botones: M√≠nimo 44px en cualquier dispositivo */
  tama√±oMinimoTactil: 44, // px
  
  /** M√°ximo ancho: 90% de pantalla, m√°ximo 400px */
  anchoMaximoModal: {
    porcentaje: 90, // %
    pixeles: 400, // px
  },
} as const;

/**
 * Breakpoints responsivos documentados
 * Fuente: UI_COMPONENTS.md - Secci√≥n responsividad
 */
export const BREAKPOINTS_RESPONSIVOS = {
  /** Smartphone peque√±o: < 350px ancho */
  smartphonePeque√±o: { max: 349 },
  
  /** Smartphone est√°ndar: 350-450px ancho */
  smartphoneEstandar: { min: 350, max: 450 },
  
  /** Smartphone grande: 450-550px ancho */
  smartphoneGrande: { min: 450, max: 550 },
  
  /** Tablet peque√±a: 550-800px ancho */
  tabletPeque√±a: { min: 550, max: 800 },
  
  /** Tablet grande: > 800px ancho */
  tabletGrande: { min: 800 },
} as const;

/**
 * Tiempos de respuesta de interfaz
 * Fuente: APP_BLUEPRINT.md
 */
export const TIEMPOS_RESPUESTA_UI = {
  /** Duraci√≥n: 2-3 segundos m√°ximo (splash) */
  splashScreenMaximo: 3000, // ms
  splashScreenMinimo: 2000, // ms
  
  /** Duraci√≥n: 15-30 segundos m√°ximo (intro) */
  introMaximo: 30000, // ms
  introMinimo: 15000, // ms
  
  /** Respuesta inmediata < 100ms */
  respuestaInmediata: 100, // ms
  
  /** Feedback inmediato: Respuesta visual/auditiva < 100ms */
  feedbackVisualMaximo: 100, // ms
} as const;

/**
 * Configuraci√≥n de timers de actividades
 * Fuente: APP_BLUEPRINT.md
 */
export const CONFIGURACION_TIMERS = {
  /** Timer configurable (2, 5, 10 minutos) */
  tiemposDisponibles: [
    2 * 60 * 1000,  // 2 minutos en ms
    5 * 60 * 1000,  // 5 minutos en ms
    10 * 60 * 1000, // 10 minutos en ms
  ],
} as const;

// =============================================================================
// üîß L√çMITES T√âCNICOS - TECHNOLOGY.md
// =============================================================================

/**
 * Configuraci√≥n de cach√© del sistema
 * Fuente: TECHNOLOGY.md - CacheService
 */
export const CONFIGURACION_CACHE = {
  /** CACHE_EXPIRY = 24 * 60 * 60 * 1000; // 24 horas */
  expiracionCacheGeneral: 24 * 60 * 60 * 1000, // ms
  
  /** CACHE_DURATION = 30 * 60 * 1000; // 30 minutos */
  duracionCacheFirebase: 30 * 60 * 60 * 1000, // ms
  
  /** Cach√© m√°s largo para insights (2 horas) */
  cacheInsights: 2 * 60 * 60 * 1000, // ms
  
  /** Cachear por 2 horas */
  cacheGeneralLargo: 2 * 60 * 60 * 1000, // ms
  
  /** expiresAt: Date.now() + (12 * 60 * 60 * 1000) // 12 horas para progreso */
  cacheProgreso: 12 * 60 * 60 * 1000, // ms
} as const;

/**
 * Configuraci√≥n de cach√© agresivo para optimizaci√≥n de costos
 * Fuente: TECHNOLOGY.md - CostOptimizationService
 */
export const CACHE_AGRESIVO = {
  /** activityCache: 4 * 60 * 60 * 1000, // 4 horas */
  actividadesCache: 4 * 60 * 60 * 1000, // ms
  
  /** userProgressCache: 2 * 60 * 60 * 1000, // 2 horas */
  progresoUsuarioCache: 2 * 60 * 60 * 1000, // ms
  
  /** aiInsightsCache: 6 * 60 * 60 * 1000 // 6 horas */
  insightsIACache: 6 * 60 * 60 * 1000, // ms
} as const;

/**
 * L√≠mites de uso de servicios cloud
 * Fuente: TECHNOLOGY.md - CostOptimizationService
 */
export const LIMITES_SERVICIOS_CLOUD = {
  /** MAX_DAILY_REQUESTS = 50000; // L√≠mite diario */
  requestsDiariosMaximos: 50000,
  
  /** MAX_FIREBASE_READS = 10000; // L√≠mite de lecturas Firestore */
  lectrasFirebaseMaximas: 10000,
  
  /** Approaching Firebase read limit, switching to cache-only mode */
  umbralAdvertenciaFirebase: 0.8, // 80%
  
  /** Approaching Cloud Function limit, reducing AI frequency */
  umbralAdvertenciaCloudFunctions: 0.8, // 80%
} as const;

/**
 * Configuraci√≥n de batch processing
 * Fuente: TECHNOLOGY.md - FirebaseDataService
 */
export const CONFIGURACION_BATCH = {
  /** BATCH_SIZE = 10 */
  tama√±oBatchFirebase: 10,
  
  /** memory: '512MB' */
  memoriaCloudFunctions: 512 * 1024 * 1024, // bytes
} as const;

/**
 * L√≠mites de rotaci√≥n de claves de seguridad
 * Fuente: TECHNOLOGY.md
 */
export const LIMITES_SEGURIDAD = {
  /** if (keyAge > 24 * 60 * 60) { // M√°s de 24 horas */
  rotacionClavesMaxima: 24 * 60 * 60 * 1000, // ms
} as const;

// =============================================================================
// üßÆ FUNCIONES DE VALIDACI√ìN
// =============================================================================

/**
 * Valida si un tiempo de respuesta es aceptable
 */
export const validarTiempoRespuesta = (tiempo: number): boolean => {
  return tiempo <= LIMITES_USABILIDAD.tiempoRespuestaMaximo;
};

/**
 * Valida si el tama√±o de un archivo cumple los l√≠mites
 */
export const validarTama√±oArchivo = (bytes: number): boolean => {
  return bytes <= LIMITES_RENDIMIENTO.tama√±oDescargaMaximo;
};

/**
 * Valida si la complejidad ciclom√°tica es aceptable
 */
export const validarComplejidadCiclomatica = (complejidad: number): 'simple' | 'moderado' | 'complejo' | 'rechazado' => {
  if (complejidad <= METRICAS_CALIDAD_CODIGO.complejidad.simple.max) return 'simple';
  if (complejidad <= METRICAS_CALIDAD_CODIGO.complejidad.moderado.max) return 'moderado';
  if (complejidad <= METRICAS_CALIDAD_CODIGO.complejidad.complejo.max) return 'complejo';
  return 'rechazado';
};

/**
 * Valida si la cobertura de tests es aceptable
 */
export const validarCoberturaTests = (porcentaje: number): 'excelente' | 'bueno' | 'aceptable' | 'inaceptable' => {
  if (porcentaje >= METRICAS_CALIDAD_CODIGO.coberturaTesting.excelente.min) return 'excelente';
  if (porcentaje >= METRICAS_CALIDAD_CODIGO.coberturaTesting.bueno.min) return 'bueno';
  if (porcentaje >= METRICAS_CALIDAD_CODIGO.coberturaTesting.aceptable.min) return 'aceptable';
  return 'inaceptable';
};

/**
 * Valida si el tiempo de sesi√≥n est√° en el rango recomendado
 */
export const validarTiempoSesion = (duracion: number): boolean => {
  return duracion >= CRITERIOS_CALIDAD.tiempoSesionMinimo && 
         duracion <= CRITERIOS_CALIDAD.tiempoSesionMaximo;
};

/**
 * Valida si el dispositivo tiene el breakpoint correcto
 */
export const obtenerBreakpoint = (ancho: number): string => {
  if (ancho <= BREAKPOINTS_RESPONSIVOS.smartphonePeque√±o.max) return 'smartphonePeque√±o';
  if (ancho <= BREAKPOINTS_RESPONSIVOS.smartphoneEstandar.max) return 'smartphoneEstandar';
  if (ancho <= BREAKPOINTS_RESPONSIVOS.smartphoneGrande.max) return 'smartphoneGrande';
  if (ancho <= BREAKPOINTS_RESPONSIVOS.tabletPeque√±a.max) return 'tabletPeque√±a';
  return 'tabletGrande';
};

/**
 * Valida si se debe usar cach√© agresivo seg√∫n l√≠mites de uso
 */
export const debeUsarCacheAgresivo = (requestsRealizados: number): boolean => {
  return requestsRealizados > (LIMITES_SERVICIOS_CLOUD.requestsDiariosMaximos * LIMITES_SERVICIOS_CLOUD.umbralAdvertenciaCloudFunctions);
};

/**
 * Valida si es necesario rotar las claves de seguridad
 */
export const necesitaRotacionClaves = (ultimaRotacion: number): boolean => {
  const tiempoTranscurrido = Date.now() - ultimaRotacion;
  return tiempoTranscurrido > LIMITES_SEGURIDAD.rotacionClavesMaxima;
};

// =============================================================================
// üéØ CONSTANTES DE VERIFICACI√ìN
// =============================================================================

/**
 * Todos los criterios que deben cumplirse OBLIGATORIAMENTE
 * Fuente: ERROR_DETECTION.md - "OBJETIVOS DE CALIDAD"
 */
export const OBJETIVOS_CALIDAD_OBLIGATORIOS = {
  erroresESLint: 0,
  erroresTypeScript: 0,
  archivosGrandesPermitidos: 0, // 100% archivos < 300 l√≠neas
  funcionesComplejasPermitidas: 0, // 100% funciones complejidad < 15
  coberturaTestsMinima: 90, // 90%+ cobertura de tests
  compatibilidadAccesibilidad: 100, // 100% accesibilidad compatible
} as const;

/**
 * M√©tricas de documentaci√≥n exigidas
 * Fuente: VERIFICATION_CHECKLIST.md
 */
export const METRICAS_DOCUMENTACION = {
  calidadMinima: 9, // sobre 10
  completitudMinima: 95, // %
  usabilidadMinima: 9, // sobre 10
  promedioGeneralMinimo: 9.9, // sobre 10
} as const;

// =============================================================================
// üìã EXPORT CONSOLIDADO
// =============================================================================

/**
 * Exportaci√≥n consolidada de todas las validaciones
 * ‚ö†Ô∏è IMPORTANTE: Estos valores son extra√≠dos DIRECTAMENTE de la documentaci√≥n
 * ‚ùå PROHIBIDO modificar sin actualizar documentos oficiales primero
 */
export const VALIDACION_CENTRALIZADA = {
  limitesUsabilidad: LIMITES_USABILIDAD,
  limitesRendimiento: LIMITES_RENDIMIENTO,
  criteriosCalidad: CRITERIOS_CALIDAD,
  criteriosIA: CRITERIOS_IA,
  limitesComplejidad: LIMITES_COMPLEJIDAD,
  metricasCalidadCodigo: METRICAS_CALIDAD_CODIGO,
  criteriosPerformance: CRITERIOS_PERFORMANCE,
  distribucionTests: DISTRIBUCION_TESTS,
  dimensionesMinimas: DIMENSIONES_MINIMAS,
  breakpointsResponsivos: BREAKPOINTS_RESPONSIVOS,
  tiemposRespuestaUI: TIEMPOS_RESPUESTA_UI,
  configuracionTimers: CONFIGURACION_TIMERS,
  configuracionCache: CONFIGURACION_CACHE,
  cacheAgresivo: CACHE_AGRESIVO,
  limitesServiciosCloud: LIMITES_SERVICIOS_CLOUD,
  configuracionBatch: CONFIGURACION_BATCH,
  limitesSeguridad: LIMITES_SEGURIDAD,
  objetivosCalidadObligatorios: OBJETIVOS_CALIDAD_OBLIGATORIOS,
  metricasDocumentacion: METRICAS_DOCUMENTACION,
} as const;

export type ValidacionCentralizada = typeof VALIDACION_CENTRALIZADA;